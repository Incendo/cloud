name: Build Cloud
on:
  push:
    branches: [ "**" ]
    tags-ignore: [ "**" ]
  pull_request:
  release:
    types: [ released ]
jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - uses: gradle/gradle-build-action@v2
        with:
          # allow master and *-dev branches to write caches (default is only master/main)
          cache-read-only: ${{ github.ref != 'refs/heads/master' && !(endsWith(github.ref, '-dev') && startsWith(github.ref, 'refs/heads/')) }}
        # gradle-build-action doesn't support caching files in the project dir
      - uses: actions/cache@v3
        with:
          path: |
            .gradle/loom-cache
            .gradle/caches/VanillaGradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/libs.versions.*', '**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Build
        run: ./gradlew build
      - name : Test Summary
        uses : EnricoMi/publish-unit-test-result-action@v2.2.0
        with :
          files : "**/build/test-results/test/TEST-*.xml"
        if : always()
      - name: Determine Status
        run: |
          if [ "$(./gradlew properties | awk '/^version:/ { print $2; }' | grep '\-SNAPSHOT')" ]; then
            echo "STATUS=snapshot" >> $GITHUB_ENV
          else
            echo "STATUS=release" >> $GITHUB_ENV
          fi
      - name: Publish Snapshot
        if: "${{ env.STATUS != 'release' && github.event_name == 'push' && github.ref == 'refs/heads/1.8.0-dev' }}"
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: "${{ secrets.SONATYPE_USERNAME }}"
          ORG_GRADLE_PROJECT_sonatypePassword: "${{ secrets.SONATYPE_PASSWORD }}"
      - name: Publish Release
        if: "${{ env.STATUS == 'release' && github.event_name == 'release' }}"
        run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: "${{ secrets.SONATYPE_USERNAME }}"
          ORG_GRADLE_PROJECT_sonatypePassword: "${{ secrets.SONATYPE_PASSWORD }}"
          ORG_GRADLE_PROJECT_signingKey: "${{ secrets.SIGNING_KEY }}"
          ORG_GRADLE_PROJECT_signingPassword: "${{ secrets.SIGNING_PASSWORD }}"
